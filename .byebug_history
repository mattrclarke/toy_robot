c
subject.world
subject.worldd
subject.world
subject
c
command
c
asubject = ToyRobot::ProgramController.new
c
command
c
command
c
command
c
command
c
asdads
c
command
c
command
c
command
c
command
c
cc
subject
c
subject
c
@robot.respond_to?(command)
command
c
subject.execute_input(command)
expect(subject.robot).to receive(:execute).once
  allow(subject.robot).to receive(:execute) {5}
  subject.execute_input(command)
allow(subject.robot).to receive(:execute) {5}
  subject.execute_input(command)
allow(subject.robot).to receive(:execute)
subject.execute_input(command)
allow(subject.robot).to receive(:execute)
command
c
  subject.execute_input(command)
expect(subject.robot).to receive(command).once
subject.robot
subject
command
c
subject.movement_controller.coords
c
subject.world
@robot
c
subject.world
subject
c
subc
subject.world.height 
Robot.any_instance.stub(:gets).and_return("#{ subject.world.height + 1 }")
c
subject
subject.send(:place_robot)
  Robot.any_instance.stub(:gets).and_return("5")
c
allow(subject).to receive(:gets).with { "5" }c
allow(subject).to receive(:gets).with { "5" }
Robot.any_instance.to receive(:gets).with { "5" }
c
subject
  subject.send(:place_robot)
Robot.any_instance.stub(gets: '5')
c
subject.send(:place_robot)
allow($stdin).to receive(:gets).and_return("5")
c
subject.movement_controller = nil
  allow($stdin).to receive(:gets).and_return("5")
c
allow(subject).to receive(:gets).and_return { "5" }
c
cc
c
subject
subject.send(:place_robot)
subject
subject.movement_controller = nil
subject
subject.send(:place_robot)
subject
c
subject
subject.send(:place_robot)
subject
c
subject.execute("move")
c
subject.execute("move")
subject.movement_controller
c
subject.movement_controller
c
subject.movement_controller
subject
c
subject.send(:facing)
subject.facing
c
@world.is_valid_position?(y, x) == true
c
@world.is_valid_position?(y, x) == false
c
@world.is_valid_position?(y, x) == false
c
@world.is_valid_position?(y, x) == false
c
@world.is_valid_position?
@world.methods.is_valid_position?
@world.methods.sort
@world.methods
@world
@world.is_valid_position?(y, x)
c
@world.is_valid_position?
c
@world.is_valid_position?
@world.is_valid_position>
@world.is_valid_posisiton
@world.is_valid_posiiton
@world.is_valid_position?(y, x)
c
subject.coordinates_exist?(subject.coords[:y], subject.coords[:x])
  expect(subject.world).to receive(:is_valid_position?).once 
c
